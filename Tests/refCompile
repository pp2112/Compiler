#!/usr/bin/ruby1.9.1
# comand line script that sends an HTTPS request to the WACC compiler web interface and interprets the JSON response

require "rest-client"
require "json"

#spacing for pretty-print
puts ""

# decare the legal options for this script
legal_options = ["-po", "-sc", "-vast", "-vasm", "-exe", "-dir", "-help"]
# first 5 of these can be passed onto the web service
pass_opts = 5
# expected no. of targets after options
target_no_min = 1
target_no_max = 1

#parse the options flags
options = Hash.new
options['execute'] = ARGV.include? legal_options[4]
options['directory'] = ARGV.include? legal_options[5] 
options['help'] = ARGV.include? legal_options[6]

# setup options for webservice and remove all options from ARGV
opts = ""
legal_options.each do |option|
  if ARGV.include? option and legal_options.index(option) < pass_opts then
    opts << option << ""
  end
  ARGV.delete(option)
end

# store number of remaining arguments
num_args = ARGV.length

# check correct number of remaining args (should be just the target)
if num_args > target_no_max then
  # if too many, then display the usage info by setting the 'help' flag
  puts "Error: too many arguments"
  puts ""
  options['help'] = true
end

# display usage info if not enough args or help flag set
if options['help'] or num_args < target_no_min then
  puts "Usage: #{$0} [options] <target.wacc>"
  puts "options:"
  puts " #{legal_options[0]}     Parse-Only. Check the input file for syntax errors and generate an AST."
  puts " #{legal_options[1]}     Semantic-Check. Parse the file for syntax and semantic errors and generate an AST."
  puts " #{legal_options[2]}   View-AST. Display AST generated by the parser."
  puts " #{legal_options[3]}   View-Assembly. Display ARM assembly code generated by the code generator."
  puts " #{legal_options[4]}    Execute. Assemble and Emulate the generated ARM code and display its output."  
  puts " #{legal_options[5]}    Directory. Run the compiler over all files in target directory."  
  puts " #{legal_options[6]}   Help. Display this usage information."
  puts ""
  puts "target.wacc: path to wacc program file to compile (or target directory if -dir option set)"
  puts ""
  exit 1
end

# set up empty array of file_paths to process
files = []
if options['directory'] then
  # add the results of a search to the array
  files += Dir.glob("#{ARGV[0]}**/*.wacc")
else
  # just add the target file to the array
  files << ARGV[0]
end

# check that there is at least one file to process
if files == [] then
  puts "Error: no file(s) targeted"
  exit 1
end

# now process each target file
files.each do |file_path|
  puts "calling the reference compiler on #{file_path}"
  
  #get stdin from the user to pass to the reference compiler
  stdin = ""
  if options['execute'] then
    puts "please provide a stdin stream to use when executing the program:"
    stdin = STDIN.gets
  end

  RestClient.post("https://teaching.doc.ic.ac.uk/wacc_compiler/run.cgi", 
                    :stdin => stdin,
                    :options => opts,
                    :testfile => File.new(file_path) 
                   ) do |response|
    json = JSON.load(response)
    puts "-- Test: #{json['test']}"
    puts ""
    puts "-- Uploaded file: "
    puts "---------------------------------------------------------------"
    puts json['upload']
    puts "---------------------------------------------------------------"
    puts ""
    puts "-- Compiler Output:"
    puts json['compiler_out']
    puts ""
  end
  
end